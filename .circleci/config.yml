version: 2
jobs:
  create_builder:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: builder-{{ checksum ".builder/Dockerfile" }}
          paths:
              - /tmp/builder_pushed
      - run:
          name: Build and push image if builder/Dockerfile has changed
          command:  |
            if [ ! -f /tmp/docker_pushed ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              echo "Building $CI_PROJECT_PATH-builder:latest"
              docker pull "$CI_PROJECT_PATH-builder:latest"
              docker build -f .builder/Dockerfile -t "$CI_PROJECT_PATH-builder:latest" .
              docker push "$CI_PROJECT_PATH-builder:latest"
              echo 1 > /tmp/docker_pushed
            fi
      - save_cache:
          key: builder-{{ checksum ".builder/Dockerfile" }}
          paths:
              - /tmp/builder_pushed
  build:
    docker:
      - image: "$CI_PROJECT_PATH-builder:latest"
      
    working_directory: /go/src/github.com/MeneDev/dockfix
    environment:
      - DEP_VERSION: 0.5.0
      - GOCACHE: "/tmp/go/cache"
    steps:
      - checkout
      - restore_cache:
          key: gopkg-{{ checksum "Gopkg.lock" }}
          paths:
              - /go/src/github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/vendor
              - /tmp/go/cache
      - run:
          name: Download and build libraries
          command: |
            if [ ! -d ./vendor ]; then
                /go/bin/dep ensure
                find vendor/ -maxdepth 3 -mindepth 3 -exec bash -c 'cd $0 && go build  ./...' {} \;
            fi
      - save_cache:
          key: gopkg-{{ checksum "Gopkg.lock" }}
          paths:
              - ./vendor
              - /tmp/go/cache

      - setup_remote_docker

      - run:
          name: Test
          command: |
            go test -v ./... -cover -race -coverprofile=/tmp/coverage.out
            $GOPATH/bin/goveralls -coverprofile=/tmp/coverage.out -service=circle-ci -repotoken=$COVERALLS_TOKEN
      - run:
          name: Build project
          command: |
            tag="$(git describe --tags 2>/dev/null | grep -E '^v.*' || true)"
            find cmd/ -maxdepth 1 -mindepth 1 -exec bash -c 'cd $0 && gox -ldflags="-s -w -X \"main.Version=${tag:-not a release}\" -X \"main.BuildDate=$(date --utc)\" -X \"main.BuildNumber=$CIRCLE_BUILD_NUM\" -X \"main.BuildCommit=$CIRCLE_SHA1\"" -os="linux windows darwin" -arch="amd64" -output "../../release/${0##*/}-{{.OS}}_{{.Arch}}"' {} \;

      - persist_to_workspace:
          root: .
          paths:
            - release
  release:
    docker:
      - image: "$CI_PROJECT_PATH-builder:latest"
    working_directory: /go/src/github.com/MeneDev/dockfix
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Update README.md
          command: |
            tag="$(git describe --tags 2>/dev/null | grep -E '^v.*' || true)"
            git config --global user.email "$GIT_EMAIL"
            git config --global user.name "$GIT_USER"

            digest=$(git rev-parse HEAD)
            git checkout -b master
            git reset --hard $digest

            /tmp/workspace/release/dockfix-linux_amd64 --markdown > README.md

            git add README.md
            git commit -m ":gem: Release $tag"
            git push --force-with-lease origin master

            digest=$(git rev-parse HEAD)
            git checkout -b develop
            git reset --hard $digest
            git push origin develop

      - run:
          name: Release new version if applicable
          command: |
            tag="$(git describe --tags 2>/dev/null | grep -E '^v.*' || true)"
            if [ ! -z "$tag" ]; then
              ghr -t "$GITHUB_TOKEN" -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" --replace "$tag" /tmp/workspace/release/
            else
              echo "not releasing, no new version"
            fi


workflows:
  version: 2
  create_builder_and_release:
    jobs:
      - create_builder:
          filters:
            branches:
              ignore:
              - master
      - build:
          requires:
              - create_builder
          filters:
            branches:
              ignore:
              - master
      - release:
          requires:
              - build
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - develop
              ignore:
                - master